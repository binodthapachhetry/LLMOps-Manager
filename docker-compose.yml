version: '3.8'

services:
  llmops-manager:
    build:
      context: .
      dockerfile: Dockerfile
    image: llmops-manager:latest
    container_name: llmops-manager
    ports:
      - "8000:8000"
    volumes:
      - ./config:/app/config
      - ./model_cache:/app/model_cache
      - ./prompt_cache:/app/prompt_cache
      - ./logs:/app/logs
    environment:
      - LLMOPS_CONFIG_PATH=/app/config/llmops.yaml
      - LLMOPS_PROVIDER=aws
      - LLMOPS_API_KEY=test-api-key
      - LOG_LEVEL=INFO
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 5s

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    depends_on:
      - llmops-manager

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped
    depends_on:
      - prometheus

  # Mock services for development/testing
  mock-aws:
    image: localstack/localstack:latest
    container_name: mock-aws
    ports:
      - "4566:4566"
    environment:
      - SERVICES=s3,sagemaker,cloudwatch
      - DEBUG=1
      - DATA_DIR=/tmp/localstack/data
    volumes:
      - ./localstack:/docker-entrypoint-initaws.d
      - localstack_data:/tmp/localstack

  # Optional: Include a database for storing deployment metadata
  postgres:
    image: postgres:15
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=llmops
      - POSTGRES_PASSWORD=llmops
      - POSTGRES_DB=llmops
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped

  # Optional: Include Redis for caching and queue management
  redis:
    image: redis:7
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped

volumes:
  prometheus_data:
  grafana_data:
  localstack_data:
  postgres_data:
  redis_data:
